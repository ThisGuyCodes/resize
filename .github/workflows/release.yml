name: Release

on:
  release:
    types: [created]

jobs:
  upload:
    name: Upload
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: ["linux", "windows", "darwin"]
        arch: ["amd64", "386"]
    steps:
    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: ^1.14
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Get dependencies
      run: |
        go get -v -t -d ./...

    - name: Build
      env:
        GOOS: ${{ matrix.os }}
        GOARCH: ${{ matrix.arch }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        CGO_ENABLED: 0
      run: |
        set -euo pipefail
        
        go build -ldflags '-w -s -extldflags "-static"' -v .
        
        EVENT_DATA=$(cat $GITHUB_EVENT_PATH)
        UPLOAD_URL=$(echo $EVENT_DATA | jq -r .release.upload_url)
        UPLOAD_URL=${UPLOAD_URL/\{?name,label\}/}
        RELEASE_NAME=$(echo $EVENT_DATA | jq -r .release.tag_name)
        PROJECT_NAME=$(basename $GITHUB_REPOSITORY)
        NAME="${PROJECT_NAME}_${RELEASE_NAME}_${GOOS}_${GOARCH}"
        
        EXT=''
        if [ $GOOS == 'windows' ]; then
          EXT='.exe'
        fi
        
        tar cvfz tmp.tgz "${PROJECT_NAME}${EXT}"
        
        CHECKSUM=$(md5sum tmp.tgz | cut -d ' ' -f 1)

        curl \
          -X POST \
          --data-binary @tmp.tgz \
          -H 'Content-Type: application/gzip' \
          -H "Authorization: Bearer ${GITHUB_TOKEN}" \
          "${UPLOAD_URL}?name=${NAME}.tar.gz"

        curl \
          -X POST \
          --data $CHECKSUM \
          -H 'Content-Type: text/plain' \
          -H "Authorization: Bearer ${GITHUB_TOKEN}" \
          "${UPLOAD_URL}?name=${NAME}_checksum.txt"
